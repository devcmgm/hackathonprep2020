{"version":3,"sources":["components/Card/Card.js","services/API.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","image","className","src","alt","style","width","API","App","useState","userData","setUserData","isLoading","setIsLoading","useEffect","a","async","fetch","response","json","result","data","fetchUsers","padding","map","user","key","id","firstName","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAceA,G,YAXF,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MAChB,OACI,yBAAKC,UAAU,QACX,yBAAKC,IAAKF,EAAOG,IAAI,SAASC,MAAO,CAACC,MAAM,UAC5C,yBAAKJ,UAAU,aACX,4BAAI,2BAAIF,QCRXO,EAAM,iCC2CJC,MAtCf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEqBF,oBAAS,GAF9B,mBAENG,EAFM,KAEKC,EAFL,KAkBb,OAfAC,qBAAU,WACRD,GAAa,IACM,qBAAAE,EAAAC,OAAA,gEAEfH,GAAa,GAFE,WAAAE,EAAA,MAGQE,MAAM,GAAD,OAAIV,EAAJ,WAHb,cAGTW,EAHS,kBAAAH,EAAA,MAIMG,EAASC,QAJf,OAITC,EAJS,OAKfT,EAAYS,EAAOC,MALJ,kDAOfR,GAAa,GAPE,yDAUnBS,KACC,IAGD,yBAAKpB,UAAU,OACb,0CACA,yBAAKG,MAAO,CAAEkB,QAAS,GAAIjB,MAAO,SAChC,yBAAKJ,UAAU,OAEXU,EAAY,0CAAsBF,EAASc,KAAI,SAAAC,GAAI,OACjD,kBAAC,EAAD,CACEC,IAAKD,EAAKE,GACV3B,KAAMyB,EAAKG,UACX3B,MAAOwB,EAAKxB,eCrBR4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a54501cc.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css'\n\nconst Card = ({name,image}) => {\n    return (\n        <div className=\"card\">\n            <img src={image} alt=\"Avatar\" style={{width:'100%'}} />\n            <div className=\"container\">\n                <h4><b>{name}</b></h4>\n            </div>\n        </div>\n    )\n}\n\nexport default Card","export const API = \"https://n161.tech/api/dummyapi\"","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Card from './components/Card/Card';\nimport { API } from './services/API'\n\nfunction App() {\n  const [userData, setUserData] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  useEffect(() => {\n    setIsLoading(true)\n    const fetchUsers = async () => {\n      try {\n        setIsLoading(false)\n        const response = await fetch(`${API}/user`)\n        const result = await response.json()\n        setUserData(result.data)\n      } catch (error) {\n        setIsLoading(false)\n      }\n    }\n    fetchUsers()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h1>Users list</h1>\n      <div style={{ padding: 20, width: '100%' }}>\n        <div className=\"row\">\n          {\n            isLoading ? <h2>Loading...</h2> : userData.map(user => (\n              <Card\n                key={user.id}\n                name={user.firstName}\n                image={user.image}\n              />\n            ))\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}